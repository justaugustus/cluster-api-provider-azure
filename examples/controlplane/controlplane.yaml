apiVersion: cluster.x-k8s.io/v1alpha2
kind: Machine
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
  labels:
    cluster.x-k8s.io/control-plane: "true"
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
spec:
  version: ${KUBERNETES_VERSION}
  bootstrap:
    configRef:
      apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
      kind: KubeadmConfig
      name: ${CLUSTER_NAME}-controlplane-0
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
    kind: AzureMachine
    name: ${CLUSTER_NAME}-controlplane-0
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
kind: AzureMachine
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
spec:
  location: ${AZURE_LOCATION}
  vmSize: ${CONTROL_PLANE_MACHINE_TYPE}
  image:
    publisher: "Canonical"
    offer: "UbuntuServer"
    sku: "18.04-LTS"
    version: "latest"
  osDisk:
    osType: "Linux"
    diskSizeGB: 30
    managedDisk:
      storageAccountType: "Premium_LRS"
  sshPublicKey: ${SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-0
spec:
  initConfiguration:
    nodeRegistration:
      name: '{{ ds.meta_data["local_hostname"] }}'
      kubeletExtraArgs:
        cloud-provider: azure
        cloud-config: /etc/kubernetes/azure.json
  clusterConfiguration:
    apiServer:
      timeoutForControlPlane: 20m
      extraArgs:
        cloud-provider: azure
        cloud-config: /etc/kubernetes/azure.json
      extraVolumes:
      - hostPath: /etc/kubernetes/azure.json
        mountPath: /etc/kubernetes/azure.json
        name: cloud-config
        readOnly: true
    controllerManager:
      extraArgs:
        cloud-provider: azure
        cloud-config: /etc/kubernetes/azure.json
        allocate-node-cidrs: "false"
      extraVolumes:
      - hostPath: /etc/kubernetes/azure.json
        mountPath: /etc/kubernetes/azure.json
        name: cloud-config
        readOnly: true
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
  postKubeadmCommands:
  - kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/kubernetes-sigs/cluster-api-provider-azure/master/examples/addons.yaml
  files:
  - path: /tmp/kubeadm-bootstrap.sh
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -euxo pipefail

      function containerd_prereq() {
        cat > /etc/modules-load.d/containerd.conf <<EOF
      overlay
      br_netfilter
      EOF

      modprobe overlay
      modprobe br_netfilter

        # Setup required sysctl params, these persist across reboots.
        cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

        sysctl --system

        apt-get install -y libseccomp2
      }

      function containerd_install() {
        # Install containerd
        wget --tries 10 https://storage.googleapis.com/cri-containerd-release/cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

        # Check hash.
        echo "${CONTAINERD_SHA256} cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz" | sha256sum --check -

        tar --no-overwrite-dir -C / -xzf cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

        # Configure containerd
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml

        # Restart containerd
        systemctl restart containerd
      }

      function kubernetes_install() {
        apt-get update && apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF
        apt-get update
        apt-get install -y kubelet="${KUBERNETES_SEMVER}-00" kubeadm="${KUBERNETES_SEMVER}-00" kubectl="${KUBERNETES_SEMVER}-00"
        apt-mark hold kubelet kubeadm kubectl
      }

      containerd_prereq
      containerd_install
      kubernetes_install
  - path: /etc/kubernetes/azure.json
    owner: "root:root"
    permissions: "0644"
    content: |
      {
        "cloud": "AzurePublicCloud",
        "tenantID": "${AZURE_TENANT_ID}",
        "subscriptionID": "${AZURE_SUBSCRIPTION_ID}",
        "resourceGroup": "${CLUSTER_NAME}",
        "securityGroupName": "${CLUSTER_NAME}-controlplane-nsg",
        "location": "${AZURE_LOCATION}",
        "vmType": "vmss",
        "vnetName": "${CLUSTER_NAME}",
        "vnetResourceGroup": "${CLUSTER_NAME}",
        "subnetName": "${CLUSTER_NAME}-controlplane-subnet",
        "routeTableName": "${CLUSTER_NAME}-node-routetable",
        "userAssignedID": "${CLUSTER_NAME}",
        "loadBalancerSku": "Standard",
        "maximumLoadBalancerRuleCount": 250,
        "useManagedIdentityExtension": true,
        "useInstanceMetadata": true
      }
---
apiVersion: cluster.x-k8s.io/v1alpha2
kind: Machine
metadata:
  name: ${CLUSTER_NAME}-controlplane-1
  labels:
    cluster.x-k8s.io/control-plane: "true"
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
spec:
  version: ${KUBERNETES_VERSION}
  bootstrap:
    configRef:
      apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
      kind: KubeadmConfig
      name: ${CLUSTER_NAME}-controlplane-1
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
    kind: AzureMachine
    name: ${CLUSTER_NAME}-controlplane-1
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
kind: AzureMachine
metadata:
  name: ${CLUSTER_NAME}-controlplane-1
spec:
  location: ${AZURE_LOCATION}
  vmSize: ${CONTROL_PLANE_MACHINE_TYPE}
  image:
    publisher: "Canonical"
    offer: "UbuntuServer"
    sku: "18.04-LTS"
    version: "latest"
  osDisk:
    osType: "Linux"
    diskSizeGB: 30
    managedDisk:
      storageAccountType: "Premium_LRS"
  sshPublicKey: ${SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-1
spec:
  joinConfiguration:
    controlPlane: {}
    nodeRegistration:
      name: '{{ ds.meta_data["local_hostname"] }}'
      kubeletExtraArgs:
        cloud-provider: azure
        cloud-config: /etc/kubernetes/azure.json
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
  files:
  - path: /tmp/kubeadm-bootstrap.sh
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -euxo pipefail

      function containerd_prereq() {
        cat > /etc/modules-load.d/containerd.conf <<EOF
      overlay
      br_netfilter
      EOF

      modprobe overlay
      modprobe br_netfilter

        # Setup required sysctl params, these persist across reboots.
        cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

        sysctl --system

        apt-get install -y libseccomp2
      }

      function containerd_install() {
        # Install containerd
        wget --tries 10 https://storage.googleapis.com/cri-containerd-release/cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

        # Check hash.
        echo "${CONTAINERD_SHA256} cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz" | sha256sum --check -

        tar --no-overwrite-dir -C / -xzf cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

        # Configure containerd
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml

        # Restart containerd
        systemctl restart containerd
      }

      function kubernetes_install() {
        apt-get update && apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF
        apt-get update
        apt-get install -y kubelet="${KUBERNETES_SEMVER}-00" kubeadm="${KUBERNETES_SEMVER}-00" kubectl="${KUBERNETES_SEMVER}-00"
        apt-mark hold kubelet kubeadm kubectl
      }

      containerd_prereq
      containerd_install
      kubernetes_install
  - path: /etc/kubernetes/azure.json
    owner: "root:root"
    permissions: "0644"
    content: |
      {
        "cloud": "AzurePublicCloud",
        "tenantID": "${AZURE_TENANT_ID}",
        "subscriptionID": "${AZURE_SUBSCRIPTION_ID}",
        "resourceGroup": "${CLUSTER_NAME}",
        "securityGroupName": "${CLUSTER_NAME}-controlplane-nsg",
        "location": "${AZURE_LOCATION}",
        "vmType": "vmss",
        "vnetName": "${CLUSTER_NAME}",
        "vnetResourceGroup": "${CLUSTER_NAME}",
        "subnetName": "${CLUSTER_NAME}-controlplane-subnet",
        "routeTableName": "${CLUSTER_NAME}-node-routetable",
        "userAssignedID": "${CLUSTER_NAME}",
        "loadBalancerSku": "Standard",
        "maximumLoadBalancerRuleCount": 250,
        "useManagedIdentityExtension": true,
        "useInstanceMetadata": true
      }
---
apiVersion: cluster.x-k8s.io/v1alpha2
kind: Machine
metadata:
  name: ${CLUSTER_NAME}-controlplane-2
  labels:
    cluster.x-k8s.io/control-plane: "true"
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
spec:
  version: ${KUBERNETES_VERSION}
  bootstrap:
    configRef:
      apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
      kind: KubeadmConfig
      name: ${CLUSTER_NAME}-controlplane-2
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
    kind: AzureMachine
    name: ${CLUSTER_NAME}-controlplane-2
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
kind: AzureMachine
metadata:
  name: ${CLUSTER_NAME}-controlplane-2
spec:
  location: ${AZURE_LOCATION}
  vmSize: ${CONTROL_PLANE_MACHINE_TYPE}
  image:
    publisher: "Canonical"
    offer: "UbuntuServer"
    sku: "18.04-LTS"
    version: "latest"
  osDisk:
    osType: "Linux"
    diskSizeGB: 30
    managedDisk:
      storageAccountType: "Premium_LRS"
  sshPublicKey: ${SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha2
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-controlplane-2
spec:
  joinConfiguration:
    controlPlane: {}
    nodeRegistration:
      name: '{{ ds.meta_data["local_hostname"] }}'
      kubeletExtraArgs:
        cloud-provider: azure
        cloud-config: /etc/kubernetes/azure.json
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
  files:
  - path: /tmp/kubeadm-bootstrap.sh
    owner: "root:root"
    permissions: "0744"
    content: |
      #!/bin/bash

      set -euxo pipefail

      function containerd_prereq() {
        cat > /etc/modules-load.d/containerd.conf <<EOF
      overlay
      br_netfilter
      EOF

      modprobe overlay
      modprobe br_netfilter

        # Setup required sysctl params, these persist across reboots.
        cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF

        sysctl --system

        apt-get install -y libseccomp2
      }

      function containerd_install() {
        # Install containerd
        wget --tries 10 https://storage.googleapis.com/cri-containerd-release/cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

        # Check hash.
        echo "${CONTAINERD_SHA256} cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz" | sha256sum --check -

        tar --no-overwrite-dir -C / -xzf cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

        # Configure containerd
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml

        # Restart containerd
        systemctl restart containerd
      }

      function kubernetes_install() {
        apt-get update && apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
      deb https://apt.kubernetes.io/ kubernetes-xenial main
      EOF
        apt-get update
        apt-get install -y kubelet="${KUBERNETES_SEMVER}-00" kubeadm="${KUBERNETES_SEMVER}-00" kubectl="${KUBERNETES_SEMVER}-00"
        apt-mark hold kubelet kubeadm kubectl
      }

      containerd_prereq
      containerd_install
      kubernetes_install
  - path: /etc/kubernetes/azure.json
    owner: "root:root"
    permissions: "0644"
    content: |
      {
        "cloud": "AzurePublicCloud",
        "tenantID": "${AZURE_TENANT_ID}",
        "subscriptionID": "${AZURE_SUBSCRIPTION_ID}",
        "resourceGroup": "${CLUSTER_NAME}",
        "securityGroupName": "${CLUSTER_NAME}-controlplane-nsg",
        "location": "${AZURE_LOCATION}",
        "vmType": "vmss",
        "vnetName": "${CLUSTER_NAME}",
        "vnetResourceGroup": "${CLUSTER_NAME}",
        "subnetName": "${CLUSTER_NAME}-controlplane-subnet",
        "routeTableName": "${CLUSTER_NAME}-node-routetable",
        "userAssignedID": "${CLUSTER_NAME}",
        "loadBalancerSku": "Standard",
        "maximumLoadBalancerRuleCount": 250,
        "useManagedIdentityExtension": true,
        "useInstanceMetadata": true
      }
